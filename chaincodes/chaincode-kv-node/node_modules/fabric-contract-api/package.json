{
  "name": "fabric-contract-api",
  "version": "2.4.2",
  "tag": "release",
  "description": "A node.js implementation of Hyperledger Fabric chaincode shim, to allow endorsing peers and user-provided chaincodes to communicate with each other",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/hyperledger/fabric-chaincode-node"
  },
  "keywords": [
    "fabric-shim",
    "Hyperledger Fabric",
    "Fabric Shim"
  ],
  "engines": {
    "node": "^16.4.0",
    "npm": "^8.0.0"
  },
  "license": "Apache-2.0",
  "types": "./types/index.d.ts",
  "nyc": {
    "exclude": [
      "coverage/**",
      "test/**",
      "gulpfile.js"
    ],
    "reporter": [
      "text-summary",
      "html",
      "cobertura"
    ],
    "all": true,
    "check-coverage": true,
    "statements": 100,
    "branches": 100,
    "functions": 100,
    "lines": 100
  },
  "dependencies": {
    "fabric-shim-api": "2.4.2",
    "class-transformer": "^0.4.0",
    "fast-safe-stringify": "^2.1.1",
    "get-params": "^0.1.2",
    "reflect-metadata": "^0.1.13",
    "winston": "^3.7.2"
  },
  "devDependencies": {
    "ajv": "^6.12.2",
    "ajv-cli": "^3.2.1",
    "ajv-formats": "2.1.1",
    "chai": "^4.3.4",
    "chai-as-promised": "^7.1.1",
    "chai-things": "^0.2.0",
    "eslint": "^6.6.0",
    "gulp": "^4.0.2",
    "gulp-debug": "~4.0.0",
    "gulp-eslint": "~6.0.0",
    "mocha": "9.1.3",
    "nyc": "15.1.0",
    "rewire": "6.0.0",
    "sinon": "13.0.1",
    "typescript": "4.4.4"
  },
  "scripts": {
    "buildt": "tsc --project test/typescript",
    "test": "nyc mocha --recursive 'test/unit/**/*.js'",
    "build": "npm run lint && npm run test:unit && npm run test:schema",
    "lint": "eslint ./lib/",
    "test:unit": "npm run test",
    "test:schema": "ajv compile -s ./schema/contract-schema.json && ajv validate -s ./schema/contract-schema.json -d ./schema/example-full.json"
  },
  "readme": "[![NPM](https://nodei.co/npm/fabric-contract-api.svg?downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/fabric-contract-api/)\n[![NPM](https://nodei.co/npm/fabric-shim.svg?downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/fabric-shim/)\n\n\n[![Version](https://badge.fury.io/js/fabric-shim.svg)](http://badge.fury.io/js/fabric-shim)\n\nThe `fabric-contract-api` provides the *contract interface*  a high level API for application developers to implement [Smart Contracts](https://hyperledger-fabric.readthedocs.io/en/release-2.1/glossary.html#smart-contract). Working with this API provides a high level entry point to writing business logic.\n\nWithin Hyperledger Fabric, Smart Contracts can also be referred to as [Chaincode](https://hyperledger-fabric.readthedocs.io/en/release-2.1/glossary.html#chaincode).  To be more specific, the term chaincode is preferred to be used to refer to the overall container that is hosting the contracts.\n\nThe `fabric-shim` provides the *chaincode interface*, a lower level API for implementing \"Smart Contracts\". It also _currently_ provides the implementation to support communication with Hyperledger Fabric peers for Smart Contracts written using the `fabric-contract-api`.  To confirm that this is the same as the `fabric-shim` in previous versions of Hyperledger Fabric.\n\nDetailed explanation on the concept and programming model can be found here: [https://hyperledger-fabric.readthedocs.io/en/latest/smartcontract/smartcontract.html](https://hyperledger-fabric.readthedocs.io/en/latest/smartcontract/smartcontract.html).\n\n## Contract Interface\n\n### Installation\n\n```sh\nnpm install --save fabric-contract-api\n```\n\n### Usage\n\nImplement a class that ends the `contract` class, a constructor is needed.\nThe other functions will be invokable functions of your Smart Contract\n\n```javascript\n// updatevalues.js\n'use strict';\n\n// SDK Library to asset with writing the logic\nconst { Contract } = require('fabric-contract-api');\n\n// Business logic (well just util but still it's general purpose logic)\nconst util = require('util');\n\n/**\n * Support the Updating of values within the SmartContract\n */\nclass UpdateValuesContract extends Contract\n\n  constructor(){\n\t   \tsuper('UpdateValuesContract');\n\t}\n\n\tasync transactionA(ctx, newValue) {\n\t\t// retrieve existing chaincode states\n\t\tlet oldValue = await ctx.stub.getState(key);\n\n\t\tawait ctx.stub.putState(key, Buffer.from(newValue));\n\n\t\treturn Buffer.from(newValue.toString());\n\t}\n\n\tasync transactionB(ctx) {\n\t  //  .....\n\t}\n\n};\n\nmodule.exports = UpdateValuesContract\n```\n\nAs with standard node modules make sure that this class is exported as follows.\n```javascript\n// index.js\n'use strict';\n\nconst UpdateValues = require('./updatevalues')\nmodule.exports.contracts = [UpdateValues];\n```\n\n**Note:** In order to make this contract 'runnable' you must also install the `fabric-shim` module as below, and ensure that the 'start' script in `package.json` refers to `fabric-chaincode-node start`\n\n```json\n  \"scripts\": {\n   \t\"start\": \"fabric-chaincode-node start\"\n  }\n```\n\nThe `fabric-shim` provides the `fabric-chaincode-node` commands; this can also be used to create a skelton metadata file. \n\n## Chaincode Interface\n\n### Installation\n```sh\nnpm install --save fabric-shim\n```\n\n### Usage\nThe [chaincode interface](https://hyperledger.github.io/fabric-chaincode-node/main/api/fabric-shim.ChaincodeInterface.html) contains two methods to be implemented:\n```javascript\nconst shim = require('fabric-shim');\n\nconst Chaincode = class {\n\tasync Init(stub) {\n\t\t// use the instantiate input arguments to decide initial chaincode state values\n\n\t\t// save the initial states\n\t\tawait stub.putState(key, Buffer.from(aStringValue));\n\n\t\treturn shim.success(Buffer.from('Initialized Successfully!'));\n\t}\n\n\tasync Invoke(stub) {\n\t\t// use the invoke input arguments to decide intended changes\n\n\t\t// retrieve existing chaincode states\n\t\tlet oldValue = await stub.getState(key);\n\n\t\t// calculate new state values and saves them\n\t\tlet newValue = oldValue + delta;\n\t\tawait stub.putState(key, Buffer.from(newValue));\n\n\t\treturn shim.success(Buffer.from(newValue.toString()));\n\t}\n};\n```\n\nStart the chaincode process and listen for incoming endorsement requests:\n```javascript\nshim.start(new Chaincode());\n```\n\n### API Reference\nVisit [API Reference](https://hyperledger.github.io/fabric-chaincode-node/main/api/) and click on \"Classes\" link in the navigation bar on the top to view the list of class APIs.\n\n\n\n## Support\nTested with Node v12  LTS release.\n\n## License\n\nThis package is distributed under the\n[Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0),\nsee LICENSE.txt for more information.\n"
}